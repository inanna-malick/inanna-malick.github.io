<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>code on [ recursion.wtf ]</title>
    <link>https://recursion.wtf/tags/code/</link>
    <description>Recent content in code on [ recursion.wtf ]</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 12 Jul 2002 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://recursion.wtf/tags/code/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Elegant and performant recursion in Rust (Draft)</title>
      <link>https://recursion.wtf/posts/rust_schemes/</link>
      <pubDate>Fri, 12 Jul 2002 00:00:00 +0000</pubDate>
      
      <guid>https://recursion.wtf/posts/rust_schemes/</guid>
      <description>&lt;p&gt;This is a post about writing elegant and performant recursive algorithms in Rust. It makes heavy use of a pattern from Haskell called recursion schemes, but you don&amp;rsquo;t need to know anything about that; it&amp;rsquo;s just an implementation detail. Instead, as motivation, here are some criterion benchmark results showing a 14-34% improvement over the typical boxed pointer representation of recursive data structures in Rust.&lt;/p&gt;
&lt;h1 id=&#34;performance-test-results&#34;&gt;Performance test results&lt;/h1&gt;
&lt;p&gt;These test results show a performance improvement of 34% for evaluating a very large expression tree (131072 elements, recursive depth 17). They were run on a 6th generation X1 carbon laptop with an Intel i7-8550U with 8MB CPU cache:&lt;/p&gt;
&lt;pre&gt;&lt;font color=&#34;#A6CC70&#34;&gt;Evaluate expression tree of depth 17 with standard method&lt;/font&gt;                                                                            
                        time:   [722.18 µs &lt;font color=&#34;#77A8D9&#34;&gt;&lt;b&gt;733.00 µs&lt;/b&gt;&lt;/font&gt; 746.43 µs]

&lt;font color=&#34;#A6CC70&#34;&gt;Evaluate expression tree of depth 17 with my new fold method&lt;/font&gt;                                                                            
                        time:   [477.87 µs &lt;font color=&#34;#77A8D9&#34;&gt;&lt;b&gt;482.54 µs&lt;/b&gt;&lt;/font&gt; 488.58 µs]
&lt;/pre&gt;
&lt;p&gt;The same tests, when run on an AMD Ryzen 9 3900X CPU with more than 64MB total cache (L1/L2/L3), still show a 14% speed improvement over the usual method.&lt;/p&gt;
&lt;pre&gt;&lt;font color=&#34;#A6CC70&#34;&gt;Evaluate expression tree of depth 17 with standard method&lt;/font&gt;                                                                            
                        time:   [295.76 µs &lt;font color=&#34;#77A8D9&#34;&gt;&lt;b&gt;295.89 µs&lt;/b&gt;&lt;/font&gt; 296.03 µs]

&lt;font color=&#34;#A6CC70&#34;&gt;Evaluate expression tree of depth 17 with my new fold method&lt;/font&gt;                                                                            
                        time:   [250.96 µs &lt;font color=&#34;#77A8D9&#34;&gt;&lt;b&gt;251.12 µs&lt;/b&gt;&lt;/font&gt; 251.31 µs]
&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>