<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>code on [ recursion.wtf ]</title>
    <link>https://recursion.wtf/tags/code/</link>
    <description>Recent content in code on [ recursion.wtf ]</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 18 Jul 2022 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://recursion.wtf/tags/code/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Elegant and performant recursion in Rust</title>
      <link>https://recursion.wtf/posts/rust_schemes/</link>
      <pubDate>Mon, 18 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://recursion.wtf/posts/rust_schemes/</guid>
      <description>&lt;p&gt;This is a post about writing elegant and performant recursive algorithms in Rust. It makes heavy use of a pattern from Haskell called recursion schemes, but you don&#39;t need to know anything about that; it&#39;s just an implementation detail. Instead, as motivation, I have benchmarks showing a 14-34% improvement over the typical boxed pointer representation of recursive data structures in Rust.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Fully generic recursion in Rust</title>
      <link>https://recursion.wtf/posts/rust_schemes_2/</link>
      <pubDate>Wed, 24 Jul 2002 00:00:00 +0000</pubDate>
      
      <guid>https://recursion.wtf/posts/rust_schemes_2/</guid>
      <description>&lt;p&gt;This is the second in a series of blog posts. Previously, we introduced a method for writing performant stack safe recursion in Rust for a single recursive data structure. This post covers the core ideas used to implement a &lt;em&gt;single&lt;/em&gt; recursion backend that can handle collapsing or expanding any user-defined recursive data structure.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>