<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>generic on [ recursion.wtf ]</title>
    <link>https://recursion.wtf/tags/generic/</link>
    <description>Recent content in generic on [ recursion.wtf ]</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 24 Jul 2002 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://recursion.wtf/tags/generic/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Fully generic recursion in Rust</title>
      <link>https://recursion.wtf/posts/rust_schemes_2/</link>
      <pubDate>Wed, 24 Jul 2002 00:00:00 +0000</pubDate>
      
      <guid>https://recursion.wtf/posts/rust_schemes_2/</guid>
      <description>&lt;p&gt;This is the second in a series of blog posts. Previously, we introduced a method for writing performant stack safe recursion in Rust for a single recursive data structure. This post covers the core ideas used to implement a &lt;em&gt;single&lt;/em&gt; recursion backend that can handle collapsing or expanding any user-defined recursive data structure. This single recursion backend has been implemented in a crate called &lt;a href=&#34;https://crates.io/crates/recursion&#34;&gt;recursion&lt;/a&gt;. Docs are &lt;a href=&#34;https://docs.rs/recursion/0.0.1-BETA/recursion&#34;&gt;here&lt;/a&gt;. Source code, along with examples and benchmarks, &lt;a href=&#34;https://github.com/inanna-malick/recursion&#34;&gt;can be found here&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>